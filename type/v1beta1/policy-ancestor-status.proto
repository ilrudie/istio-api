// Copyright 2019 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

// $title: Kubernetes Gateway-API Policy Ancestor Status
// $description: Definition of Policy Ancestor Status
// $location: https://istio.io/docs/reference/config/type/policy-ancestor-status.html


package istio.type.v1beta1;

option go_package="istio.io/api/type/v1beta1";

message ParentReference {
	// Group is the group of the referent.
	// +optional
  string group = 1;

	// Kind is kind of the referent.
	// +optional
  string kind = 2;

	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	// +optional
  string namespace = 3;

	// Name is the name of the referent.
	// Name ObjectName `json:"name"`
  string name = 4;

	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	// +optional
  string section_name = 5;

	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	// +optional
  int32 port = 6;
}

message PolicyAncestorStatus {
  // AncestorRef corresponds with a ParentRef in the spec that this
	// PolicyAncestorStatus struct describes the status of.
  ParentReference ancestor_ref = 1;

  // ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
  string controller_name = 2;

  // repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
  repeated Condition conditions = 3;
}

message Condition {
  // type of condition in CamelCase or in foo.example.com/CamelCase.
  // ---
  // Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
  // useful (see .node.status.conditions), the ability to deconflict is important.
  // The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
  // +required
  string type = 1;

  // status of the condition, one of True, False, Unknown.
  // +required
  string status = 2;

  // observedGeneration represents the .metadata.generation that the condition was set based upon.
  // For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
  // with respect to the current state of the instance.
  // +optional
  int64 observed_generation = 3;

  // lastTransitionTime is the last time the condition transitioned from one status to another.
  // This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
  // +required
  google.protobuf.Timestamp last_transition_time = 4;

  // reason contains a programmatic identifier indicating the reason for the condition's last transition.
  // Producers of specific condition types may define expected values and meanings for this field,
  // and whether the values are considered a guaranteed API.
  // The value should be a CamelCase string.
  // This field may not be empty.
  // +required
  string reason = 5;

  // message is a human readable message indicating details about the transition.
  // This may be an empty string.
  // +required
  string message = 6;
}

